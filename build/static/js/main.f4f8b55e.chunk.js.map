{"version":3,"sources":["static/gameBoard.png","components/gameSquare.tsx","handlers/boardHandler.ts","handlers/playerHandler.ts","components/gameBoard.tsx","handlers/moveHandler.ts","components/mainContainer.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","GameSquare","onclickMarker","props","markerAndPlayer","player","hasTurn","moveMarker","marker","this","onClick","style","width","height","borderRadius","backgroundColor","color","border","borderStyle","borderColor","React","Component","gameSquare","display","alignItems","justifyContent","minWidth","margin","squareId","gameBoard","id","extraTurn","playerOne","name","markers","moveList","playerTwo","GameBoard","state","stepAmount","players","moveResult","playerToMove","otherPlayer","newPosition","playerToMoveMarkersOnBoard","filter","square","otherPlayersMarkersOnBoard","currentMarkerIndexPosition","findIndex","position","length","console","log","forEach","markerToUpdate","undefined","finished","Lodash","find","markerExists","markerToCheck","nextSquareIndex","markerToMove","move","validateMove","winner","checkForWinner","setState","feedbackText","diceResultToShow","playerToMoveHasWon","otherPlayerHasWon","diceResult","Math","floor","random","cloneDeep","squareData","playerOneMarkerSearch","playerTwoMarkerSearch","foundMarker","markersPlayer","image","require","Fragment","marginBottom","map","marginRight","flexDirection","fontSize","toUpperCase","moveNewButton","diceButton","passButton","src","alt","gameSquares","firstUnusedMarker","canMoveNew","className","callMove","simulateDiceThrow","MarkerAndPlayer","findMarkerOnSquare","gameBoardImage","gameBoardWrapper","flexWrap","alignContent","padding","navigationWrapper","MainContainer","mainContainer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4f8b55e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gameBoard.03cbc304.png\";","import React from 'react'\r\nimport { SquareData } from '../handlers/boardHandler'\r\nimport { Player, playerOne, playerTwo, Marker } from '../handlers/playerHandler'\r\n\r\ninterface State {\r\n    \r\n}\r\n\r\ninterface Props {\r\n    squareData: SquareData\r\n    moveMarker: (marker: Marker) => void\r\n    markerAndPlayer?: {player: Player, marker: Marker}\r\n}\r\n\r\nexport default class GameSquare extends React.Component<Props, State> {\r\n\r\n    private get marker(){\r\n        if(this.props.markerAndPlayer) {\r\n            return (\r\n                <div style={{\r\n                    width: \"40%\", \r\n                    height: \"40%\", \r\n                    borderRadius: \"100%\", \r\n                    backgroundColor: \r\n                    this.props.markerAndPlayer.player.color, border: \"1\",\r\n                    borderStyle: \"solid\",\r\n                    borderColor: \"white\"\r\n                }} />\r\n            )\r\n        }\r\n    }\r\n\r\n    private onclickMarker = () => {\r\n        if(this.props.markerAndPlayer && this.props.markerAndPlayer.player.hasTurn) {\r\n            this.props.moveMarker(this.props.markerAndPlayer.marker)\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let player = this.props.markerAndPlayer ? this.props.markerAndPlayer.player : undefined\r\n        let marker = this.props.markerAndPlayer ? this.props.markerAndPlayer.marker : undefined\r\n        \r\n        return (\r\n            <div onClick={this.onclickMarker} style={style['gameSquare']}>\r\n                { this.marker }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst style: { [key: string]: React.CSSProperties } = {\r\n    gameSquare: {\r\n        display: \"flex\",\r\n        alignItems: \"center\", \r\n        justifyContent: \"center\",    \r\n        height: \"21.3%\",\r\n        minWidth: \"11%\",\r\n        margin: \"0.5%\"\r\n    },\r\n    squareId: {\r\n        color: \"white\"\r\n    }\r\n}\r\n","import { Player } from './playerHandler'\r\n\r\nexport interface SquareData {\r\n    id: string\r\n    extraTurn?: boolean \r\n}\r\n\r\nexport const gameBoard: SquareData[] = [\r\n    {id: \"A1\", extraTurn: true},\r\n    {id: \"A2\"},\r\n    {id: \"A3\"},\r\n    {id: \"A4\"},\r\n    {id: \"A5\"},\r\n    {id: \"A6\"},\r\n    {id: \"A7\", extraTurn: true},\r\n    {id: \"A8\"},\r\n    {id: \"B1\"},\r\n    {id: \"B2\"},\r\n    {id: \"B3\"},\r\n    {id: \"B4\", extraTurn: true},\r\n    {id: \"B5\"},\r\n    {id: \"B6\"},\r\n    {id: \"B7\"},\r\n    {id: \"B8\"},\r\n    {id: \"C1\", extraTurn: true},\r\n    {id: \"C2\"},\r\n    {id: \"C3\"},\r\n    {id: \"C4\"},\r\n    {id: \"C5\"},\r\n    {id: \"C6\"},\r\n    {id: \"C7\", extraTurn: true},\r\n    {id: \"C8\"},\r\n]\r\n","import { SquareData } from \"./boardHandler\";\r\n\r\nexport interface Player {\r\n    id: number\r\n    name: string\r\n    color: string\r\n    hasTurn: boolean\r\n    markers: Marker[]\r\n    moveList: string[]\r\n}\r\n\r\nexport interface Marker {\r\n    id: number,\r\n    square?: SquareData\r\n    finished?: boolean\r\n}\r\n\r\nexport const playerOne:Player = {\r\n    id: 1,\r\n    name: \"Kalle\",\r\n    color: \"red\",\r\n    hasTurn: true,\r\n    markers: [\r\n        { id: 1 },\r\n        { id: 2 },\r\n        { id: 3 },\r\n        { id: 4 },\r\n        { id: 5 },\r\n        { id: 6 }\r\n    ],\r\n    moveList: [\r\n        \"A4\",\r\n        \"A3\",\r\n        \"A2\",\r\n        \"A1\",\r\n        \"B1\",\r\n        \"B2\",\r\n        \"B3\",\r\n        \"B4\", \r\n        \"B5\",\r\n        \"B6\",\r\n        \"B7\",\r\n        \"B8\",\r\n        \"A8\",\r\n        \"A7\"\r\n    ]\r\n}\r\n\r\nexport const playerTwo:Player = {\r\n    id: 2,\r\n    name: \"Pelle\",\r\n    color: \"blue\",\r\n    hasTurn: false,\r\n    markers: [\r\n        { id: 1 },\r\n        { id: 2 },\r\n        { id: 3 },\r\n        { id: 4 },\r\n        { id: 5 },\r\n        { id: 6 }\r\n    ],\r\n    moveList: [\r\n        \"C4\",\r\n        \"C3\",\r\n        \"C2\",\r\n        \"C1\",\r\n        \"B1\",\r\n        \"B2\",\r\n        \"B3\",\r\n        \"B4\", \r\n        \"B5\",\r\n        \"B6\",\r\n        \"B7\",\r\n        \"B8\",\r\n        \"C8\",\r\n        \"C7\"\r\n    ]\r\n}\r\n","import React from 'react'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\nimport Lodash from 'lodash'\r\nimport GameSquare from './gameSquare'\r\nimport { gameBoard, SquareData } from '../handlers/boardHandler'\r\nimport { Player, playerOne, playerTwo, Marker } from '../handlers/playerHandler'\r\nimport { validateMove } from '../handlers/moveHandler'\r\n\r\ninterface State {\r\n    playerOne: Player\r\n    playerTwo: Player\r\n    stepAmount: number | undefined\r\n    feedbackText: string\r\n    diceResultToShow: number | undefined\r\n}   \r\n\r\n\r\nexport default class GameBoard extends React.Component<{}, State> {\r\n\r\n    constructor(props: {}) {\r\n        super(props)\r\n        this.state = {\r\n            playerOne: playerOne,\r\n            playerTwo: playerTwo,\r\n            stepAmount: undefined,\r\n            feedbackText: \"roll the dice!\",\r\n            diceResultToShow: undefined\r\n        }\r\n    }\r\n\r\n    private get players() {\r\n        const players: {playerToMove: Player, otherPlayer: Player} = {\r\n            playerToMove: this.state.playerOne.hasTurn ? cloneDeep(this.state.playerOne) : cloneDeep(this.state.playerTwo),\r\n            otherPlayer: this.state.playerTwo.hasTurn ? cloneDeep(this.state.playerOne) : cloneDeep(this.state.playerTwo)\r\n        }\r\n        return players\r\n    }\r\n\r\n    private checkForWinner(moveResult: { playerToMove: Player, otherPlayer: Player }) {\r\n        const playerToMoveHasWon: boolean = !Lodash(moveResult.playerToMove.markers).find(marker => !marker.finished)\r\n        const otherPlayerHasWon: boolean = !Lodash(moveResult.otherPlayer.markers).find(marker => !marker.finished)\r\n    \r\n        let winner: Player | undefined = playerToMoveHasWon ? moveResult.playerToMove : otherPlayerHasWon ? moveResult.otherPlayer : undefined\r\n\r\n        if(winner) {\r\n            return \"has won, congrats!\"\r\n        } else {\r\n            return \"roll the dice!\"\r\n        }\r\n    }\r\n\r\n    private moveMarker = (marker: Marker) => {\r\n        if (!this.state.stepAmount) {\r\n            return\r\n        }\r\n\r\n        const players = this.players\r\n        const moveResult: { playerToMove: Player, otherPlayer: Player } | undefined = validateMove(players.playerToMove, players.otherPlayer, this.state.stepAmount!, marker)\r\n        \r\n        if(moveResult) {\r\n            const winner = this.checkForWinner(moveResult)\r\n            this.setState({\r\n                playerOne: winner == \"has won, congrats!\" ? playerOne : players.playerToMove.id == 1 ? moveResult.playerToMove : moveResult.otherPlayer,\r\n                playerTwo: winner == \"has won, congrats!\" ? playerTwo : players.playerToMove.id == 2 ? moveResult.playerToMove : moveResult.otherPlayer,\r\n                stepAmount: undefined,\r\n                feedbackText: winner,\r\n                diceResultToShow: undefined\r\n            }, () => {console.log(this.state)})\r\n        } else {\r\n            return\r\n        }\r\n    }\r\n\r\n    private get moveNewButton() {\r\n        const playerToMove = this.players.playerToMove\r\n        const firstUnusedMarker: Marker | undefined = Lodash(playerToMove.markers).find(marker => !!!marker.square && !marker.finished)\r\n        const canMoveNew = firstUnusedMarker && this.state.stepAmount != undefined\r\n        const className = canMoveNew ? \"ui big button \" + playerToMove.color : \"ui big button disabled \" + playerToMove.color\r\n        const callMove = canMoveNew ? () => { this.moveMarker(firstUnusedMarker!) } : () => { console.log(\"Inga markers kvar\") }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <button className={ className } onClick={ callMove }>Place new</button>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    private get diceButton() {\r\n        const className = \"ui big button green \" + (this.state.stepAmount != undefined ? \"disabled\" : \"\") \r\n        return (\r\n            <React.Fragment>\r\n                <button className={ className } onClick={ () => { this.simulateDiceThrow() } }>Throw dices!</button>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    private get passButton() {\r\n        const players = this.players\r\n        players.playerToMove.hasTurn = false\r\n        players.otherPlayer.hasTurn = true\r\n        return (\r\n            <button \r\n                className=\"ui big button\" \r\n                onClick={() => { \r\n                    this.setState({ \r\n                        playerOne: players.playerToMove, \r\n                        playerTwo: players.otherPlayer, \r\n                        stepAmount: undefined, \r\n                        diceResultToShow: undefined,\r\n                        feedbackText: \"roll the dice!\"\r\n                    }) \r\n                }}>\r\n                    Pass\r\n            </button>\r\n        )\r\n    }\r\n\r\n    private simulateDiceThrow() {\r\n        const diceResult = Math.floor(Math.random() * Math.floor(5))\r\n        console.log(diceResult)\r\n        if (diceResult == 0) {\r\n            let playerToMove: Player = this.state.playerOne.hasTurn ? cloneDeep(this.state.playerOne) : cloneDeep(this.state.playerTwo)\r\n            let otherPlayer = playerToMove.id == 1 ? cloneDeep(this.state.playerTwo) : cloneDeep(this.state.playerOne)\r\n\r\n            playerToMove.hasTurn = false\r\n            otherPlayer.hasTurn = true\r\n\r\n            this.setState({ \r\n                feedbackText: \"hit the dice!\",\r\n                stepAmount: undefined,\r\n                diceResultToShow: diceResult,\r\n                playerOne: playerToMove.id == 1 ? playerToMove : otherPlayer,\r\n                playerTwo: playerToMove.id == 2 ? playerToMove : otherPlayer,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                feedbackText: \"move marker!\",\r\n                stepAmount: diceResult,\r\n                diceResultToShow: diceResult\r\n            })\r\n        }\r\n    }\r\n\r\n    private findMarkerOnSquare(squareData: SquareData) {\r\n        const playerOneMarkerSearch = this.state.playerOne.markers.find((marker) => marker.square && marker.square.id === squareData.id)\r\n        const playerTwoMarkerSearch = this.state.playerTwo.markers.find((marker) => marker.square && marker.square.id === squareData.id)\r\n        const foundMarker = playerOneMarkerSearch ? playerOneMarkerSearch : playerTwoMarkerSearch ? playerTwoMarkerSearch : undefined\r\n        const markersPlayer = playerOneMarkerSearch ? this.state.playerOne : playerTwoMarkerSearch ? this.state.playerTwo : undefined\r\n\r\n        return foundMarker && markersPlayer ? { player: markersPlayer, marker: foundMarker } : undefined\r\n    }\r\n\r\n    private get gameSquares() {\r\n        return gameBoard.map((squareData) => {\r\n            const MarkerAndPlayer: {player: Player, marker: Marker} | undefined = this.findMarkerOnSquare(squareData) \r\n            return <GameSquare squareData={squareData} markerAndPlayer={MarkerAndPlayer} moveMarker={this.moveMarker}/>\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const image = require(\"./../static/gameBoard.png\")\r\n        return (\r\n            <React.Fragment> \r\n                <div style={{width: \"100%\", display: \"flex\", justifyContent: \"center\", alignItems: \"flex-end\", marginBottom: \"1em\"}}>\r\n                    <div style={{width: \"30%\", display: \"flex\", justifyContent: \"center\"}}>\r\n                        { \r\n                            this.state.playerOne.markers.map((marker) => {\r\n                                if(!marker.finished && !marker.square) {\r\n                                    return (\r\n                                        <div style={{width: \"3vw\", height: \"3vw\", borderRadius: \"100%\", marginRight: \"10px\", backgroundColor: this.state.playerOne.color}} />\r\n                                    )\r\n                                }\r\n                            })\r\n                        }\r\n                    </div>\r\n                    <div style={{width: \"30%\", display: \"flex\", alignItems: \"center\", flexDirection: \"column\"}}>\r\n                        <h1 style={{fontSize: \"3em\", margin: \"0.2em\"}}>\r\n                            { this.state.diceResultToShow != undefined ? \"Dice: \" + this.state.diceResultToShow : \"-\" }\r\n                        </h1>\r\n                        <h1 style={{fontSize: \"2em\", margin: \"1em\"}}>\r\n                            <span style={{color: this.players.playerToMove.color, marginRight: \"10px\"}}>\r\n                                {this.players.playerToMove.color.toUpperCase()}\r\n                            </span>\r\n                            { this.state.feedbackText }\r\n                        </h1> \r\n                        <div style={style['navigationWrapper']}>\r\n                            { this.moveNewButton }\r\n                            { this.diceButton }\r\n                            { this.passButton }\r\n                        </div>  \r\n                    </div>\r\n                    <div style={{width: \"30%\", display: \"flex\", justifyContent: \"center\"}}>\r\n                        { \r\n                            this.state.playerTwo.markers.map((marker) => {\r\n                                if(!marker.finished && !marker.square) {\r\n                                    return (\r\n                                        <div style={{width: \"3vw\", height: \"3vw\", borderRadius: \"100%\", marginRight: \"10px\", backgroundColor: this.state.playerTwo.color}} />\r\n                                    )\r\n                                }\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n                \r\n                \r\n                <div style={style['gameBoardWrapper']}>\r\n                <img style={style['gameBoardImage']} src={image} alt=\"\">\r\n                </img>\r\n                    <div style={style['gameBoard']}>\r\n                        { this.gameSquares }\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst style: { [key: string]: React.CSSProperties } = {\r\n    gameBoardImage: {\r\n        width: \"100%\"\r\n    },\r\n    gameBoardWrapper: {\r\n        position: \"relative\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        width: \"100wv\"\r\n    },\r\n    gameBoard: {\r\n        position: \"absolute\",\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        alignContent: \"center\",\r\n        padding: \"0% 4.5% 0% 4.5%\",\r\n        width: \"100%\",\r\n        height: \"100%\"\r\n    },\r\n    navigationWrapper: {\r\n        display: \"flex\", \r\n        justifyContent: \"space-between\",\r\n        marginBottom: \"5px\"\r\n    }\r\n}\r\n","import { Player, Marker } from './playerHandler'\r\nimport Lodash from 'lodash'\r\nimport { gameBoard, SquareData } from './boardHandler';\r\nimport GameBoard from '../components/gameBoard';\r\n\r\nfunction move(playerToMove: Player, otherPlayer: Player, newPosition: SquareData, markerToMove: Marker) {\r\n\r\n    //let markerToMove: Marker | undefined = playerToMove.markers.find((marker) => marker.id == marker.id)\r\n\r\n    // Ta bort marker om konflikt hittas\r\n    otherPlayer.markers.forEach((marker) => {\r\n        if (marker.square && marker.square.id == newPosition.id) {\r\n            delete marker.square\r\n        }\r\n    })\r\n\r\n    // Uppdatera marker som skall flyttas \r\n    playerToMove.markers.forEach((marker) => {\r\n        if (marker.id == markerToMove.id) {\r\n            marker.square = newPosition\r\n        }\r\n    })\r\n\r\n    if (!newPosition.extraTurn) {\r\n        playerToMove.hasTurn = false\r\n        otherPlayer.hasTurn = true\r\n    }\r\n    \r\n    return { playerToMove, otherPlayer }\r\n}\r\n\r\nexport function validateMove(playerToMove: Player, otherPlayer: Player, stepAmount: number, marker: Marker) {\r\n    let newPosition: SquareData = gameBoard[0]\r\n    \r\n    const playerToMoveMarkersOnBoard = playerToMove.markers.filter((marker) => !!marker.square)\r\n    const otherPlayersMarkersOnBoard = otherPlayer.markers.filter((marker) => !!marker.square)\r\n\r\n    // Förflyttningen går ej om markern går över mål.. Går ut med markern om stegen är rätt till mål.\r\n    if (marker.square) {\r\n        const currentMarkerIndexPosition = playerToMove.moveList.findIndex((position) => position == marker.square!.id)\r\n        if ((currentMarkerIndexPosition + stepAmount) == playerToMove.moveList.length) {\r\n            console.log(\"Markern går ut!\")\r\n            playerToMove.markers.forEach(markerToUpdate => {\r\n                if (markerToUpdate.id == marker.id) {\r\n                    markerToUpdate.square = undefined\r\n                    markerToUpdate.finished = true\r\n                }\r\n            });\r\n            playerToMove.hasTurn = !playerToMove.hasTurn\r\n            otherPlayer.hasTurn = !otherPlayer.hasTurn\r\n            return { playerToMove, otherPlayer }\r\n        } else if ((currentMarkerIndexPosition + stepAmount) > playerToMove.moveList.length) {\r\n            console.log(\"För långt\")\r\n            return undefined\r\n        } else {\r\n            newPosition = Lodash(gameBoard).find((square) => square.id == playerToMove.moveList[currentMarkerIndexPosition + stepAmount]) as SquareData\r\n        }\r\n    } \r\n    if (!marker.square) {\r\n        newPosition = Lodash(gameBoard).find((square) => square.id == playerToMove.moveList[stepAmount - 1]) as SquareData  \r\n    }\r\n    \r\n    // Om det finns en annan marker ifrån motspelaren på en \"Extra turn\" skall nästa square kollas\r\n    if (newPosition.extraTurn) {\r\n        const markerExists: Marker | undefined = otherPlayersMarkersOnBoard.find((markerToCheck) => {\r\n            if(markerToCheck.square) {\r\n                if (markerToCheck.square.id == newPosition.id) {\r\n                    return markerToCheck\r\n                }\r\n            }\r\n        })\r\n\r\n        if (markerExists) {\r\n            console.log(\"Det finns en fiendes marker på specialsquare. Väljer nästa square!\")\r\n            const nextSquareIndex = playerToMove.moveList.findIndex((position) => position == markerExists.square!.id) + 1\r\n            newPosition = gameBoard.find((square) => {\r\n                return square.id == playerToMove.moveList[nextSquareIndex]\r\n            }) as SquareData\r\n        }\r\n    }\r\n    \r\n    // Om det finns en egen marker på platsen du försöker flytta till går det ej\r\n    if(Lodash(playerToMoveMarkersOnBoard).find(marker => marker.square!.id == newPosition.id)) {\r\n        console.log(\"Det finns en egen marker på ny plats\")\r\n        return undefined\r\n    }\r\n    \r\n    return move(playerToMove, otherPlayer, newPosition, marker)\r\n}\r\n","import React from 'react'\nimport Gameboard from './gameBoard'\n\nexport default class MainContainer extends React.Component {\n    render() {\n        return (\n            <div style={style[\"mainContainer\"]} className=\"ui container\">\n                <Gameboard/>\n            </div>\n        )\n    }\n}\n\n\nconst style: { [key: string]: React.CSSProperties } = {\n    mainContainer: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        width: \"80vw\",\n        height: \"100vh\",\n        padding: \"1em\"\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MainContainer from './components/mainContainer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MainContainer />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}